(1) let关键词声明的变量具有块作用域，在块内声明的重名变量不会影响该变量在块外的值，也只能在块内访问
(2) let关键词和var关键词都具有函数作用域和全局作用域，但var关键词定义的全局变量属于window对象
    (var car="nice",car可使用window.car), 但let的不属于window对象，也不能这样操作
(3) 重新申明变量：
    1.允许在程序的任何位置使用 var 重新声明 JavaScript 变量
    2.在相同的作用域，或在相同的块中，通过 let 重新声明一个 var 变量是不允许的
    3.在相同的作用域，或在相同的块中，通过 var 重新声明一个 let 变量是不允许的
    4.在相同的作用域，或在相同的块中，通过 let 重新声明一个 let 变量是不允许的
    5.在不同的作用域或块中，通过 let 重新声明变量是允许的
(4) const声明变量（没有定义常量值，定义的是对值的常量引用）：
    1.声明变量时必须同时赋初始值 const pi=3.14;
    2.声明的常量不能更改 const x=6; x=7(报错)
    3.声明的常量不能更改其原始值，但我们可以更改常量对象的属性
    (const nums=[1,2,3]; nums[0]=4)
(5) js数据类型：数值、字符串值、数组、对象等等:
    0.“==”表示相等，“===”表示严格相等，前者只判断值，后者既判断值又判断类型是否相等
    1.当数值和字符串相加时，JavaScript将把数值视作字符串
    从左向右计算表达式。不同的次序会产生不同的结果
    (var x = 911+"john" => 911john)
    (var x = 911+7+"john" => 918john)
    (var x = "john"+911+7 => john9117)
    2.js中对象用花括号来书写，对象属性是name：value（跟字典一模一样）
    (对象中也可以有方法，方法是在对象上执行的动作，方法以函数定义被储存在属性中)
    (var person = {
                    firstName: "Bill",
                    lastName : "Gates",
                    id       : 678,
                    fullName : function() {
                                 return this.firstName + " " + this.lastName;
                                }
    };)
    (this关键词指的就是该person对象，通过person.fullName()可以访问该方法，person.属性名/person["属性名"]访问属性)
    3.js中函数通过function关键字进行定义，其后是函数名和括号().
(6)常见的HTML事件:
    1.onchange: HTML元素已被改变        2.onclick:  用户点击了HTML元素
    3.onmouseover: 用户将鼠标移动到HTML元素上       4.onmouseout: 用户把鼠标移开HTML元素
    5.onkeydown: 用户按下键盘按键       6.onload: 浏览器完成页面加载
(7)字符串:用单引号或者双引号包括，但所含内容有单/双引号，使用转义字符\处理
    
    所有字符串方法都会返回新字符串。它们不会修改原始字符串。

    正式地说：字符串是不可变的：字符串不能更改，只能替换。

    1. length 属性返回字符串的长度 a.length
    2. indexOf() 方法返回字符串中指定文本首次出现的索引（位置） a.indexOf("apple")
      a.indexOf("apple",9) 第二个参数为起始检索位置
    3. lastIndexOf() 方法返回指定文本在字符串中最后一次出现的索引 (是从尾到头检索，未找到文本均返回-1)
    4. search() 方法搜索特定值的字符串，并返回匹配的位置 a.search("apple")
    ***:indexOf()和search()方法同为检索，但二者是有区别的
        a. search()方法不能设置第二个参数
        b. indexOf()方法无法设置更强大的搜索值（正则表达式）
    5.  slice() 提取字符串的某个部分并在新字符串中返回被提取的部分 slice(start,end)
        substring() 类似于 slice(),不同之处在于 substring() 无法接受负的索引。substring(start,end)
        substr() 类似于 slice(),不同之处在于第二个参数规定被提取部分的长度 substr(start,length)
    6.  replace()用另一个值替换在字符串中指定的值  replace("new","old")
       默认地，replace() 只替换首个匹配
    7.  toUpperCase()/toLowerCase() 把字符串转换为大小写
    8.  concat() 连接两个或多个字符串 concat("hello","world")
    9.  strim() 删除字符串两端的空白符
    10. charAt() 方法返回字符串中指定索引（位置）的字符     charAt(position)
    11. charCodeAt() 方法返回字符串中指定索引的字符 unicode 编码 c harCodeAt(position)
    12. split() 将字符串转换为数组 
    13. match() 方法根据正则表达式在字符串中搜索匹配项，并将匹配项作为 Array 对象返回。
    14. String.includes(),如果字符串包含指定值，includes() 方法返回 true。 string.includes(searchvalue, start)
    15. String.startsWith(),如果字符串以指定值开头，则 startsWith() 方法返回 true。 string.startsWith(searchvalue, start)
    16. String.endsWith()，如果字符串以指定值结尾，则 endsWith() 方法返回 true。 string.endsWith(searchvalue, length)
    
    字符串模板(字符串操作的增强):使用反引号来定义字符串,就是当作普通字符串使用
    1. 可以在字符串中同时使用单引号和双引号
    2. 允许多行字符串
    3. 可以使用${...}进行字符串插值 var car="ben" var person=`i have a ${car}`
(8)js中的数值类型只有一种，始终是64位的浮点数
    1. 在所有数字运算中，JavaScript 会尝试将字符串转换为数字
      “100”-“10”=90 “100”/“10”=10 “100”*“10”=1000 单加法是例外的
    2. NaN 属于 JavaScript 保留词，指示某个数不是合法数（Not a number）
    3. 可使用全局 JavaScript 函数 isNaN() 来确定某个值是否是数
    4. Infinity （或 -Infinity）是 JavaScript 在计算数时超出最大可能数范围时返回的值(可以理解为+/-无穷)。
    5. toString() 方法把数输出为十六进制、八进制或二进制。var num=128 num.toString(16)=80
    6. toExponential() 返回字符串值,参数定义小数点后的位数，默认会进行四舍五入，不定义参数就不会四舍五入
    7. toFixed() 返回字符串值，它包含了指定小数位数的数字 var x = 9.656 x.toFixed(0)=10 x.toFixed(2)=9.66
    8. toPrecision() 返回字符串值，它包含了指定长度的数字. var x=9.656 x.toPrecision(2)=9.7 x.toPrecision(3)=9.66
    9. Number()返回数字，由其参数转换而来. parseFloat()/parseInt() 解析其参数并返回浮点数/整数，只返回参数中的首个数字
(9)数组方法：JavaScript中可通过引用数组名来访问完整数组
    
    0.在 JavaScript 中，数组使用数字索引。对象使用命名索引。

    1. length 属性返回数组的长度（数组元素的数目）
    2. join() 方法也可将所有数组元素结合为一个字符串(但可以自己规定分隔符) 
    3. toString() 把数组转换为数组值（逗号分隔）的字符串
    4. push() 方法（在数组结尾处）向数组添加一个新的元素 
    5. pop() 方法从数组中删除最后一个元素并返回该值
    6. shift() 方法会删除首个数组元素，并把所有其他元素“位移”到更低的索引，且返回该值
    7. unshift() 方法（在开头）向数组添加新元素，并“反向位移”旧元素，且返回添加元素后数组的长度
    8. delete a[index] 会删除该元素并留下空洞。（删除后再次索引相同位置会返回undefined）
    9. splice() 方法可用于向数组添加新项
        (var fruits = ["Banana", "Orange", "Apple", "Mango"];
        fruits.splice(2, 0, "Lemon", "Kiwi");)-------->["Banana", "Orange","Lemon", "Kiwi" ,"Apple", "Mango"]
        第一个参数（2）定义了应添加新元素的位置（拼接）
        第二个参数（0）定义应删除多少元素。
        其余参数（“Lemon”，“Kiwi”）定义要添加的新元素
    ***:fruits.splice(0, 1); // 删除 fruits 中的第一个元素且不会留下空洞（巧妙的参数设定）
    10. concat() 方法通过合并（连接）现有数组来创建一个新数组，数组数量是任意多个的,也可以是值作为参数
        a,b,c三个数组 d=a.concat(b,c)
    11. slice(start,end)方法用数组的某个片段切出新数组（它不会从源数组中删除任何元素）
(10)数组迭代：
    1.forEach() 方法为每个数组元素调用一次函数。 var num = [4,5,6] num.forEach(myfunction) myfunction(value,index,arry)
    2.map() 方法通过对每个数组元素执行函数来创建新数组,不会对没有值的数组元素执行函数,   myfunction(value,index,arry)
      不会更改原始数组。 var num = [4,5,6]  var num1=num.map(myfunction)       
    3.filter() 方法创建一个包含通过测试的数组元素的新数组。var num=[4,5,6] var over5=num.fliter(myfunction)   myfunction(value,index,arry)
    4.reduce() 方法在每个数组元素上运行函数，以生成（减少它）单个值 var num=[4,5,6] var sum=num.reduce(myfunction，初始值) myfunction(total,value,index.arry)
      此函数接受4个参数，总数（初始值/先返回的值）；项目值；项目索引；数组本身           初始值默认是0
    5.reduceRight()方法，工作方式是数组的从右到左，reduce()是从左到右
    6.every() 方法检查所有数组值是否通过测试。some() 方法检查某些数组值是否通过了测试。返回的是true/false
    7.find() 方法返回通过测试函数的第一个数组元素的值。 findIndex() 方法返回通过测试函数的第一个数组元素的索引。
(11)数学：
    1.Math.round(x) 的返回值是 x 四舍五入为最接近的整数
    2.Math.pow(x, y) 的返回值是 x 的 y 次幂
    3.Math.sqrt(x) 返回 x 的平方根
    4.Math.abs(x) 返回 x 的绝对（正）值
    5.Math.ceil(x) 的返回值是 x 上舍入最接近的整数
    6.Math.floor(x) 的返回值是 x 下舍入最接近的整数
    7.Math.sin(x)/Math.cos(x)/math.tan(x)
    8.Math.min() 和 Math.max() 可用于查找参数列表中的最低或最高值
    9.Math.random() 返回介于 0（包括）与 1（不包括）之间的随机数
    10.math.log(x) 返回 x 的自然对数（底为e）
    11.Math.floor(Math.random() * 10); 返回 0 至 9 之间的数
    12.Math.floor(Math.random() * (max - min) ) + min；返回介于 min（包括）和 max（不包括）之间的随机数
    13.条件三元运算符 variablename = (condition) ? value1:value2
(12)循环：
    1.for/in 语句遍历对象的属性:(**普通的就是索引值，数组也可以这样用)
        var person = {fname:"Bill", lname:"Gates", age:62}; 
        var text = "";
        var x;
        for (x in person) {
            text += person[x];
        }
    2.break语句跳出循环，continue语句跳出循环中的一个迭代
(13)错误：
    try 语句使您能够测试代码块中的错误。
    catch 语句允许您处理错误。
    throw 语句允许您创建自定义错误。
    finally 使您能够执行代码，在 try 和 catch 之后，无论结果如何。
(14)this 关键字:
    1.在方法中，this 指的是所有者对象
    2.单独的情况下，this 指的是全局对象（在浏览器窗口中,全局对象就是object Window）
    3.在函数中，this 指的是全局对象
    4.在事件中，this 指的是接收事件的元素
(15)js类：
    1.使用关键字class创建类，且必须要添加名为constructor()的方法，再添加任意数量的其他方法
    2.javascript中类不是对象，它只是JavaScript对象的模板
(16)json:
    1.JSON 是存储和传输数据的格式。
    2.JSON 经常在数据从服务器发送到网页时使用。
    3.JSON 指的是 JavaScript Object Notation,是轻量级的数据交换格式,独立于语言 
(17)令人误解的浮点:
    var x = 0.1;
    var y = 0.2;
    var z = x + y；   z中的结果不是0.3
    var z = (x * 10 + y * 10) / 10;  z中的结果将是 0.3
(18)js中对象:
    1.javascript中对象是易变的，javascript变量不是易变的。
        var person = {firstName:"Bill", lastName:"Gates", age:62, eyeColor:"blue"}
        var x = person;       //不会去创建一个person的副本给x
        x.age = 10;           // 这将同时改变 both x.age 和 person.age
    2.对象属性可以简单赋值添加，通过delete关键词可以删除属性
        person.nationality="china"    delete person.age
    3.显示对象：按名称/循环遍历显示对象属性，使用object.values()/json.stringify()显示对象
        当在循环中显示对象属性时，使用person[x],而不能使用person.x，因为这时的x是个变量
        Object.values()，任何JavaScript对象都可以被转换为数组 arry=Object.values(person)
        JSON.stringify(),任何JavaScript对象都可以被转换为字符串(该字符串是遵循json标记法的)
    4.对象访问器：set、get关键字
        var person = {
            firstName: "Bill",
            lastName : "Gates",
            language : "",
            set lang(lang) {
                this.language = lang;
            }
            };
            // 使用 setter 来设置对象属性：
            person.lang = "en";
            // 显示来自对象的数据：
            document.getElementById("demo").innerHTML = person.language;

        var person = {
            firstName: "Bill",
            lastName : "Gates",
            fullName : function() {
                return this.firstName + " " + this.lastName;
            }
            };

            // 使用方法来显示来自对象的数据：
            document.getElementById("demo").innerHTML = person.fullName();

        var person = {
            firstName: "Bill",
            lastName : "Gates",
            get fullName() {
                return this.firstName + " " + this.lastName;
            }
            };

            // 使用 getter 来显示来自对象的数据：
            document.getElementById("demo").innerHTML = person.fullName;

        例子 1 以函数形式访问 fullName：person.fullName()。
        例子 2 以属性形式访问 fullName：person.fullName。（更简洁）
    5.对象构造器函数：创建相同类型的过个对象
        1.使用function构造一个对象构造器函数
        2.通过new 关键词调用构造器函数可以创建相同类型的对象
            在构造器函数中，this 是没有值的。它是新对象的替代物。 当一个新对象被创建时，this 的值会成为这个新对象。
            function Person(first, last, age, eye) {
                this.firstName = first;
                this.lastName = last;
                this.age = age;
                this.eyeColor = eye;
            }
            var myFather = new Person("Bill", "Gates", 62, "blue");
            var myMother = new Person("Steve", "Jobs", 56, "green");
            在myFather对象中添加新属性和方法
            myFather.nationality = "china";
            myFather.name = function () {
                return this.firstName + " " + this.lastName;
            };
            **在构造器函数中添加新属性/方法只能去函数里面加，不能使用上述形式(Person.nationality="china")
    6.对象原型：所有的JavaScript对象都从原型中继承属性和方法
        1.在构造器函数中添加新属性/方法,可以使用Person.prototype.nationality="china"
    7.对象方法：
        1.object.create() 以现有对象为原型创建对象
        2.Object.defineProperty(object, property, descriptor) 添加或更改对象属性
        3.Object.getOwnPropertyDescriptor(object, property) 访问属性
        4.Object.getOwnPropertyNames(object)  以数组返回所有属性
        5.Object.getPrototypeOf(object)  访问原型
        6.Object.keys(object) 以数组返回可枚举属性
        7.Object.preventExtensions(object) 防止向对象添加属性
        8.Object.isExtensible(object)  如果属性可以添加到对象，则返回 true
        9.Object.seal(object)  防止更改对象属性（不是值）
        10.Object.isSealed(object) 如果对象被密封，则返回 true
        11.Object.freeze(object) 防止对对象进行任何更改
        12.Object.isFrozen(object) 如果对象被冻结，则返回 true
    8.map 对象:
        1.map对象存有键值对，其中的键可以是任何的数据类型。map对象记得键的原始插入顺序。map对象具有表示映射大小的属性。
        2.new map() 创建新的 Map 对象
        3.set()	为 Map 对象中的键设置值
        4.get()	获取 Map 对象中键的值
        5.entries()	返回 Map 对象中键/值对的数组
        6.keys()	返回 Map 对象中键的数组
        7.values()	返回 Map 对象中值的数组
        8.clear()	删除 Map 中的所有元素。
        9.delete()	删除由键指定的元素。
        10.has()	如果键存在，则返回 true
        11.Map.size 返回 Map 中元素的数量
(19)js中函数:
        1.JavaScript 函数定义不会为参数（parameter）规定数据类型
        2.JavaScript 函数不会对所传递的参数（argument）实行类型检查
        3.JavaScript 函数不会检查所接收参数（argument）的数量,调用时少于被声明的数量，丢失的值被设置为undefined
        4.arguments Javascripts中的内置对象，包含函数调用时使用的参数数组（参数太多时使用方便）
            x = findMax(1, 123, 500, 115, 44, 88);
            function findMax() {
                var i;
                var max = -Infinity;
                for (i = 0; i < arguments.length; i++) {
                    if (arguments[i] > max) {
                        max = arguments[i];
                    }
                }
                return max;
            }
        5.call()方法是预定义的Javascript方法，通过它您能够使用属于另一个对象的方法。

        ***:调用 person 的 fullName 方法，并用于 person1,call()可传参数
            var person = {
                fullName: function() {
                    return this.firstName + " " + this.lastName + "," + city + "," + country;
                    }
                }
            var person1 = {
                firstName:"Bill",
                lastName: "Gates",
            }
            person.fullName.call(person1,"cq","china");  // 将返回 "Bill Gates,cq,china"
        6.apply()方法与call()方法类似，不同是call()方法分别接受参数，而apply()方法接受数组形式的参数。
          如果是使用数组而不是参数列表，则apply()更方便
            var person = {
                fullName: function(city, country) {
                    return this.firstName + " " + this.lastName + "," + city + "," + country;
                    }
                }
            var person1 = {
                firstName:"Bill",
                lastName: "Gates"
            }
            person.fullName.apply(person1, ["Oslo", "Norway"]);
        7.闭包:
(20)js中类:
        1.类不是对象，它是Javascript中对象的模板。
        2.当您有了一个类时，可以使用该类来创建对象
            class Car {
                constructor(name, year) {
                    this.name = name;
                    this.year = year;
                    }
                method_1() { ... }
                method_2() { ... }
                method_3() { ... }
            }
            let myCar1 = new Car("Ford", 2014);
        3.类中的语法必须以"严格模式"编写,即使用变量前必须要声明
        4.类继承使用extends关键字，super() 方法引用父类。通过在 constructor 方法中
          调用 super() 方法，我们调用了父级的 constructor 方法，获得了父级的属性和方法的访问权限
            class Car {
                constructor(brand) {
                    this.carname = brand;
                }
                present() {
                    return 'I have a ' + this.carname;
                }
            }

            class Model extends Car {
                constructor(brand, mod) {
                    super(brand);
                    this.model = mod;
                }
                show() {
                    return this.present() + ', it is a ' + this.model;
                }
            }
            let myCar = new Model("Ford", "Mustang");
            document.getElementById("demo").innerHTML = myCar.show();
        5.与函数和其他 JavaScript 声明不同，类声明不会被提升。这意味着您必须先声明类，然后才能使用它
        6.static类方法，当类中的某个方法使用static进行定义，该方法只能通过类来进行调用，不能在类对象上进行调用
            class Car {
                constructor(name) {
                    this.name = name;
                }
                static hello() {
                    return "Hello!!";
                }
            }
            let myCar = new Car("Ford");
            // 您可以在 Car 类上调用 'hello()' ：
            document.getElementById("demo").innerHTML = Car.hello();
            // 但不能在 Car 对象上调用：
            // document.getElementById("demo").innerHTML = myCar.hello();
            // 此举将引发错误。
21.js Async:
        1.js 回调：回调是作为参数传递给另一个函数的函数
            function myDisplayer(some) {
                document.getElementById("demo").innerHTML = some;
            }

            function myCalculator(num1, num2, myCallback) {
                let sum = num1 + num2;
                myCallback(sum);
            }

            myCalculator(5, 5, myDisplayer);
        2.js 异步：与其他函数并行运行的函数称为异步
        3.js promise
        4.js Asynic
22.DOM:
        1.DOM是一项W3C(World Wide Web consortium)标准，定义了作为对象的HTML元素
          定义了所有HTML元素的属性 ，定义了访问所有HTML元素的方法，定义了HTML元素的事件
        2.DOM方法：就是你能够在HTML元素上执行的动作
        3.DOM属性: 就是你能够设置或改变的HTML元素的值
        4.DOM文档对象：是网页中所有其他对象的拥有者，文档对象其实就是你的网页，访问网页中
          的任何元素，总是从访问document对象开始的
        5.查找HTML元素：通过ID/标签名/类名/CSS选择器/HTML对象集合查找
          var x = document.getElementById("nice")  //id
          var y = document.getElementByTagName("p") //标签
          var z = x.getElementByTagName("p") //查找id为nice的元素下的所有p标签
          var x = document.getElementsByClassName("intro"); //类名
          var x = document.querySelectorAll("p.intro"); // class="intro"的所有<p>元素
        6.DOM可以改变HTML元素的内容:
          修改 HTML 文档内容最简单的方法是，使用 innerHTML 属性
          document.getElementById(id).innerHTML = new text
          修改 HTML 属性的值，请使用如下语法：
          document.getElementById(id).attribute = new value
          (document.getElementById("myImage").src = "landscape.jpg";)