1.移动端链接点击会有个高亮的背景色，需要清除，设置为transparent
-webkit-tap-highlight-color: transparent

2.在移动端浏览器默认的外观在iOS上加上这个属性才能给按钮和输入框自定义样式
-webkit-appearance: none

3.禁用长按页面时的弹出菜单
img,a {-webkit-touch-callout: none}

4.移动端常见布局
（1）单独制作移动端页面(主流)
    流式布局（百分比布局）
    flex弹性布局(强烈推荐)
    less+rem+媒体查询布局
    混合布局
（2）响应式页面兼容移动端(其次)
    媒体查询布局bootstrap

5.流式布局，通过盒子的宽度设置成百分比来根据屏幕的宽度进行伸缩
不受固定像素的限制，内容向两侧填充
max-width/height  min-width/height 最大、最小高宽度，防止其无限拉伸

6.flex弹性布局
    （原理：通过给父盒子添加flex属性，来控制子盒子的位置和排列方式）
    1.传统布局：兼容性好/布局繁琐/局限性，不能在移动端很好的布局
    2.flex弹性布局: 操作方便，布局简单，移动端应用广泛/PC端浏览器支持
    情况较差/IE11或更低版本，不支持或部分支持
    3.任何一个容器都可以指定为flex布局，父盒子flex容器，子元素flex项目
    4.当父盒子指定为flex布局后，子元素的float、clear和vertical-align属性将失效
    5.flex父项常见属性
    flex-flow:flex-direction/flex-wrap的复合属性
    (1)flex-direction:设置主轴(也就是行)的方向
    （默认主轴方向就是x轴方向，水平向右//侧轴方向就是y轴方向，水平向下
      子元素就是跟着主轴来排列的）
    row:从左到右 row-reverse:从右到左 column:从上到下 column-reverse:从下到上
    (2)justify-content:设置主轴上的子元素排列方式
    flex-start:靠头对齐 flex-end:靠尾对齐  center:居中对齐
    space-around:将空间平均分给子元素 space-between:先两边贴边，再平均分配空间
    (3)flex-wrap:设置子元素是否换行(默认是不换行，如果放不开，会自动缩小宽度)
    nowrap/wrap:不换行/换行
    (4)align-items:设置侧轴上的子元素排列方式(只限于只有单行元素)
    flex-start/flex-end/center stretch:拉伸，子元素不要给高度
    (5)align-content:设置侧轴上的子元素排列方式(只可以用于多行元素)
    flex-start/flex-end/center/space-around/space-between

    6.flex布局子项常见属性
    (1)flex属性：定义子项目分配剩余空间的占多少份数 number
    /* flex可以写百分比，相对于父级来说的 */
    (2)align-self属性：控制某个子项自己在侧轴上的排列方式
    (3)order属性：定义子项目的排列顺序，默认值是0，值越小越往前排

7.rem适配布局
页面布局文字能否随着屏幕大小变化而变化？
流式布局和flex布局主要针对宽度布局，那高度如何设置？
怎样让屏幕变化的时候元素高度和宽度等比例缩放？
    (1)rem(root em)是一个相对单位，类似的是em、em是相对于父元素字体大小来说的
    rem是相对于html元素（就是页面最大的元素）的字体大小。优点就是可以通过改变html
    元素里面的文字大小来改变页面中元素的大小可以整体控制

    (2)媒体查询语法简介（media query CSS3新语法）
    @media可以针对不同的屏幕尺寸设置不同的样式
    @media mediatype and|not|only (media feature){CSS-Code}
    mediatype: all/print/screen 所有设备/打印设备/电脑、平板、手机屏幕等
    media feature: max-width/min-width

    (3)媒体查询+rem实现元素大小动态变化
    (4)针对不同的屏幕尺寸调用不同的css文件
    <link rel="stylesheet" href="?.css" media="screen and (min-width:320px)">

    (5)less基础(是一门CSS扩展语言，成为了CSS预处理器，在css的语法上，加入了程序式语言的特性)
    css缺点：
    1.css需要书写大量看似没有逻辑的代码，冗余度较高
    2.不方便维护及扩展，不利于复用
    3.css没有很好的计算能力
    4.非前端工程师来讲，往往会因为缺少css编写经验而很难写出组织良好且易于维护的css代码项目

    less(是一门新语言)的出现很好的解决了上诉的问题
    less变量： @变量名：值
    less编译: less包含一套自定义的语法及一个解析器，用户根据语法定义自己的样式规则，这些规则最终会通过解析器，编译生成对应的CSS文件
    less嵌套: 子元素的样式直接写到父元素里面
    less运算：任何数字、颜色或者变量都可以参与运算(两个数参与运算，如果只有一个数有单位，则最后的结果就以这个单位为准
    如果两个数都有单位，而且是不一样的单位，最后的结果以第一个单位为准)
    除法运算需要加括号
    @import url("common.less"); 
    @import 导入的意思 可以把一个样式文件导入到另外一个样式文件里面

    (6)rem适配方案（px转换为rem cssrem插件）
    1.按照设计稿与设备宽度的比例，动态计算并设置html根标签的font-size大小(媒体查询)
    2.CSS中，设计稿元素的宽、高、相对位置等取值，按照同等比例换算为rem为单位的值
    3.技术方案1：rem+媒体查询+less技术
    4.技术方案2：flexible.js(淘宝团队出的简洁高效移动适配库)被viewport替代了

8.响应式布局
    (1)原理：就是使用媒体查询针对不同宽度的设备进行布局和样式的设置，从而适配不同设备的目的
    响应式需要一个父级作为布局容器，来配合子级元素来实现变化效果
    (2)bootstrap前端开发框架
    1.bootstrap需要为页面内容和栅格系统包裹一个.container容器，bootstrap预先
    定义好了这个类，叫.container,它提供了两个作此用处的类，（直接写类名）就自动是响应式布局了
    a.container类
    响应式布局的容器 固定宽度
    大屏(>=1200px) 宽度定为1170px
    中屏(>=992px) 宽度定为970px
    小屏(>=768px) 宽度定为750px
    超小屏(100%)

    b.container-fluid类
    流式布局容器百分百宽度
    占据全部视口(viewport)的容器
    适合于单独做移动端开发

    2.bootstrap栅格系统（grid systems）：将页面划分为等分的列，通过列数的定义来模块化页面布局
    默认是将container划分为12列，添加相应的类别实现效果
    col-xs/col-sm/col-md/col-lg -*自己设定每份划分几列
    col-md-offset-* 设定盒子向右偏移几份，可以用来使两个盒子在两端对齐
    col-md-push-*/col-md-pull-* 实现列序的交换，将右侧盒子拉向左侧，将左侧盒子推向右侧
    hidden-xs/sm/md/lg:设置盒子在什么尺寸的屏幕下隐藏起来
    visible-xs/sm/md/lg：设置盒子在什么尺寸的屏幕下显示出来

9.vw/wh是一个相对视口大小的单位(类似于em和rem相对单位)
    vw:视口宽度单位 vh:视口高度单位
    1vw/vh = 1/100视口宽度/高度
    和百分比是有区别的，百分比是相对于父元素来说的，而vw和vh总是针对于当前视口来说的