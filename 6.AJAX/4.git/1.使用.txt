git:管理代码版本，记录，切换，合并代码
git仓库：记录文件状态内容的地方，存储着修改的历史记录

git区域：
(1)工作区：实际开发时操作的文件夹
(2)暂存区：保存之前的准备区域(暂存改动过的文件) 
(3)版本库: 提交并保存暂存区中的内容,产生一个版本快照

git文件状态:
(1)未跟踪:新文件，从未被Git管理过
(2)已跟踪:Git已经知道和管理的文件
未跟踪(U)->新添加(A)->未修改("")->已修改(M)

git暂存区使用
(1)暂时存储，可以临时恢复代码内容，与版本库解耦
(2)暂存区->覆盖->工作区 git restore 目标文件(完全确认覆盖时使用) 当更改后不想使用进行返回
(3)从暂存区移除文件，git rm --cached 目标文件

git回退版本
(1)把版本库某个版本对应的内容快照,恢复到工作区/暂存区

git文件删除
(1)手动删除工作区文件
(2)git rm --cached 目标文件 删除暂存区对应文件
(3)提交保存

git忽略文件
(1).gitignore文件可以让git彻底忽略跟踪指定文件
(2)目的:让git仓库更小更快,避免重复无意义的文件管理
(3)例如:系统/软件自动生成的文件,编译产生的结果文件，运行时生成的日志文件、缓存文件、临时文件等、
创建:
(1)项目根目录新建.gitignore文件
(2)填入相应配置来忽略指定文件

git分支
(1)本质上是指向提交节点的可变指针，默认文件时master
(2)HEAD指针影响工作区/暂存区的代码状态(head指针指向谁会影响代码版本的显示)
(3)场景:开发新需求/修复BUG,保证主线代码随时可用,多人协同开发提高效率

git分支的合并与删除
(1)切回到合入的分支上: git checkout master
(2)合并其他分支过来: git merge 要合并的分支名（例如login-bug）
(3)删除合并后的分支指针:git branch -d 要合并的分支名（login-bug）

git分支的合并与提交
合并的两种情况
(1)head指针仍然存在开始创建分支的位置，那么合并就相当移动指针，在后面接上新分支的内容
(2)head指针没有在开始创建分支的位置了(因为可能有其他分支已经提前合并了),这时就发生(3)的情况
(3)合并提交:发生于原分支产生了新的提交记录后，再合并回去时发生，自动使用多个快照记录合并后产生一次新的提交

git分支的合并冲突（在不同分支下对同一文件进行修改，git就会产生合并冲突）
(1)需要手动解决和提交（vscode中会给出报错信息）

git远程仓库:
(1)托管在因特网或其他网络中的你的项目的版本库
(2)保存版本库的历史记录，多人协作
(3)创建:公司自己服务器/第三方托管平台(Gitee,GitLab,GitHub..)

1.git配置用户信息（用户名和邮箱，应用在每次提交代码版本时表明自己身份,便于多人协作）
（1）git config --global user.name "xxx"
（2）git config --global user.email "xxxx"
2.git配置的清单信息(按q可退出)
 (1)git config --list
3.git仓库创建
 (1)git init
 (2)从其他服务器克隆
4.git工作区->暂存区->版本库
 (1)git add 文件名(暂存指定文件)
 (2)git add. (暂存所有改动的文件) 
 git ls-files 查看暂存区下的所有文件
 (3)git commit - m "注释说明" (提交并保存,产生版本快照)
5.git暂存区和工作区文件状态查看
 (1)git status -s
6.git提交记录查看
 (1)git log --oneline
 (2)git reflog --oneline
7.git回退版本命令
 (1)git reset --soft 版本号 （工作区和暂存区都有保留）当前的版本有很多文件，回退的版本有部分文件，会将当前版本中对应的文件覆盖为回退版本的，剩余的文件仍然保留着
 (2)git reset --hard 版本号 （工作区和暂存区都覆盖） 工作区和暂存区都只有回退版本的文件
 (3)git reset --mixed 版本号 (工作区有保留的文件，暂存区都被覆盖) 暂存区只有回退版本的文件了
8.git分支命令
 (1)git branch 分支名 创建分支命令
 (2)git checkout 分支名 切换分支命令
 (3)git branch 查看所有分支
9.git远程仓库使用
 (1)注册第三方托管平台网站账号
 (2)新建仓库得到远程仓库Git地址
 (3)本地Git仓库添加远程仓库原点地址
 git remote add 远程仓库别名 远程仓库地址
 (4)本地Git仓库推送版本记录到远程仓库
 git push -u 远程仓库别名 本地和远程分支名(同名写一个就行)
 (5)移除远程仓库
 git remote remove 远程仓库别名
10.git远程仓库-克隆
（1）(从无到有)git clone 远程仓库地址 （在运行命令的文件夹，生成一个项目文件夹，包含版本库，并映射到暂存区和工作区）
（2）(简单拉取)git pull 